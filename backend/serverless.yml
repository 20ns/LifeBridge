service: lifebridge-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    AWS_REGION: us-east-1
    TRANSCRIBE_BUCKET: lifebridge-transcribe-temp-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
        - bedrock:InvokeModelWithResponseStream
        - bedrock:ListFoundationModels
      Resource: '*'
    - Effect: Allow
      Action:
        - polly:SynthesizeSpeech
        - transcribe:StartTranscriptionJob
        - transcribe:GetTranscriptionJob
      Resource: '*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::lifebridge-transcribe-temp-${self:provider.stage}/*
    - Effect: Allow
      Action:
        - s3:CreateBucket
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::lifebridge-transcribe-temp-${self:provider.stage}
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: '*'

functions:
  translate:
    handler: dist/handlers/translate.handler
    timeout: 30
    events:
      - http:
          path: /translate
          method: post
          cors: true

  detectLanguage:
    handler: dist/handlers/detectLanguage.handler
    timeout: 15
    events:
      - http:
          path: /detect-language
          method: post
          cors: true

  textToSpeech:
    handler: dist/handlers/textToSpeech.handler
    timeout: 20
    events:
      - http:
          path: /text-to-speech
          method: post
          cors: true

  emergencyPhrases:
    handler: dist/handlers/emergencyPhrases.handler
    timeout: 20
    events:
      - http:
          path: /emergency-phrases
          method: get
          cors: true

  speechToText:
    handler: dist/handlers/speechToText.handler
    timeout: 60
    events:
      - http:
          path: /speech-to-text
          method: post
          cors: true

plugins:
  - serverless-offline

resources:
  Resources:
    TranscribeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: lifebridge-transcribe-temp-${self:provider.stage}
        LifecycleConfiguration:
          Rules:
            - Id: DeleteTranscriptionFiles
              Status: Enabled
              ExpirationInDays: 1
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

custom:
  serverless-offline:
    httpPort: 3001
    host: localhost
