# serverless.yml
service: lifebridge-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1
  stage: ${opt:stage, 'dev'}

  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    USERS_TABLE: lifebridge-users-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'change_this_dev_secret'}

    # Medical-grade compliance configuration
    AUDIT_LOGS_TABLE: lifebridge-audit-logs-${self:provider.stage}
    REVIEW_REQUESTS_TABLE: lifebridge-review-requests-${self:provider.stage}
    IMPACT_METRICS_TABLE: lifebridge-impact-metrics-${self:provider.stage}
    TRANSLATE_CACHE_TABLE: lifebridge-translate-cache-${self:provider.stage}
    KMS_KEY_ID: alias/aws/dynamodb
    REVIEW_ALERTS_TOPIC_ARN: !Ref ReviewAlertsSnsTopic
    AUDIT_LOG_GROUP: /aws/lifebridge/audit-${self:provider.stage}
    POWERTOOLS_PARAMETERS_MAX_AGE: "43200"    # cut Secrets Manager calls

  iamRoleStatements:
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
        - bedrock:ListFoundationModels
      Resource: '*'

    - Effect: Allow
      Action:
        - polly:SynthesizeSpeech
      Resource: '*'

    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: '*'

    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/lifebridge-audit-logs-${self:provider.stage}
        - arn:aws:dynamodb:${self:provider.region}:*:table/lifebridge-review-requests-${self:provider.stage}
        - arn:aws:dynamodb:${self:provider.region}:*:table/lifebridge-impact-metrics-${self:provider.stage}
        - arn:aws:dynamodb:${self:provider.region}:*:table/lifebridge-users-${self:provider.stage}
        - arn:aws:dynamodb:${self:provider.region}:*:table/lifebridge-translate-cache-${self:provider.stage}
        - arn:aws:dynamodb:${self:provider.region}:*:index/*

    - Effect: Allow
      Action:
        - kms:Encrypt
        - kms:Decrypt
        - kms:ReEncrypt*
        - kms:GenerateDataKey*
        - kms:DescribeKey
      Resource:
        - arn:aws:kms:${self:provider.region}:*:key/*

    - Effect: Allow
      Action:
        - sns:Publish
        - sns:Subscribe
        - sns:CreateTopic
      Resource: '*'

    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: '*'

  logRetentionInDays: 3            # keep logs 3 days
  tracing:
    lambda: ${env:DEV_MODE, false} # X-Ray only when DEV_MODE=true

functions:
  translate:
    handler: dist/handlers/translate.handler
    timeout: 30
    events:
      - http:
          path: /translate
          method: post
          cors: ${self:custom.corsConfig}

  detectLanguage:
    handler: dist/handlers/detectLanguage.handler
    timeout: 15
    events:
      - http:
          path: /detect-language
          method: post
          cors: ${self:custom.corsConfig}

  textToSpeech:
    handler: dist/handlers/textToSpeech.handler
    timeout: 20
    events:
      - http:
          path: /text-to-speech
          method: post
          cors: ${self:custom.corsConfig}

  emergencyPhrases:
    handler: dist/handlers/emergencyPhrases.handler
    timeout: 20
    events:
      - http:
          path: /emergency-phrases
          method: get
          cors: ${self:custom.corsConfig}

  speechToText:
    handler: dist/handlers/speechToText.handler
    timeout: 60
    events:
      - http:
          path: /speech-to-text
          method: post
          cors: ${self:custom.corsConfig}

  emergencyProtocol:
    handler: dist/handlers/amazonQ.getEmergencyProtocol
    timeout: 30
    events:
      - http:
          path: /emergency-protocol
          method: post
          cors: ${self:custom.corsConfig}

  triageSuggestion:
    handler: dist/handlers/amazonQ.getTriageSuggestion
    timeout: 30
    events:
      - http:
          path: /triage-suggestion
          method: post
          cors: ${self:custom.corsConfig}

  contextualAdvice:
    handler: dist/handlers/amazonQ.getContextualAdvice
    timeout: 30
    events:
      - http:
          path: /contextual-advice
          method: post
          cors: ${self:custom.corsConfig}

  signLanguageProcessor:
    handler: dist/handlers/signLanguageProcessor.handler
    timeout: 20
    events:
      - http:
          path: /sign-language-process
          method: post
          cors: ${self:custom.corsConfig}

  signToTranslation:
    handler: dist/handlers/signLanguageProcessor.signToTranslation
    timeout: 30
    events:
      - http:
          path: /sign-to-translation
          method: post
          cors: ${self:custom.corsConfig}

  batchSignProcessing:
    handler: dist/handlers/signLanguageProcessor.batchSignProcessing
    timeout: 45
    events:
      - http:
          path: /batch-sign-processing
          method: post
          cors: ${self:custom.corsConfig}

  gestureRecognition:
    handler: dist/handlers/gestureRecognition.handler
    timeout: 20
    events:
      - http:
          path: /gesture-recognition
          method: post
          cors: ${self:custom.corsConfig}

  # ------------- AUTH --------------
  authLogin:
    handler: dist/handlers/auth.login
    timeout: 15
    events:
      - http:
          path: /auth/login
          method: post
          cors: ${self:custom.corsConfig}

  authRegister:
    handler: dist/handlers/auth.register
    timeout: 15
    events:
      - http:
          path: /auth/register
          method: post
          cors: ${self:custom.corsConfig}

  offlineSync:
    handler: dist/handlers/offlineSync.handler
    timeout: 15
    events:
      - http:
          path: /sync
          method: post
          cors: ${self:custom.corsConfig}

  # -------- HUMAN REVIEW -----------
  getPendingReviews:
    handler: dist/handlers/humanReview.getPendingReviews
    timeout: 30
    events:
      - http:
          path: /review/pending
          method: get
          cors: ${self:custom.corsConfig}

  submitReview:
    handler: dist/handlers/humanReview.submitReview
    timeout: 30
    events:
      - http:
          path: /review/submit
          method: post
          cors: ${self:custom.corsConfig}

  escalateReview:
    handler: dist/handlers/humanReview.escalateEmergencyReview
    timeout: 30
    events:
      - http:
          path: /review/escalate
          method: post
          cors: ${self:custom.corsConfig}

  getReviewMetrics:
    handler: dist/handlers/humanReview.getReviewMetrics
    timeout: 30
    events:
      - http:
          path: /review/metrics
          method: get
          cors: ${self:custom.corsConfig}

plugins:
  - serverless-offline

resources:
  Resources:
    # Medical-grade audit logging table (HIPAA)
    AuditLogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: lifebridge-audit-logs-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: timestamp-index
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        Tags:
          - Key: Purpose
            Value: HIPAA-Compliant-Audit-Logging
          - Key: Environment
            Value: ${self:provider.stage}

    # Human review requests table
    ReviewRequestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: lifebridge-review-requests-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
          - AttributeName: reviewStatus
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: reviewStatus-timestamp-index
            KeySchema:
              - AttributeName: reviewStatus
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Purpose
            Value: Human-Review-Workflow
          - Key: Environment
            Value: ${self:provider.stage}

    # Impact metrics
    ImpactMetricsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: lifebridge-impact-metrics-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: metricId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: metricId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: timestamp-index
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Purpose
            Value: Medical-Impact-Analytics
          - Key: Environment
            Value: ${self:provider.stage}

    # Translation cache
    TranslateCacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: lifebridge-translate-cache-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        Tags:
          - Key: Purpose
            Value: Translation-Cache
          - Key: Environment
            Value: ${self:provider.stage}

    # SNS topic for review alerts
    ReviewAlertsSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: lifebridge-review-alerts-${self:provider.stage}
        DisplayName: LifeBridge Review Alerts
        Tags:
          - Key: Purpose
            Value: Human-Review-Notifications
          - Key: Environment
            Value: ${self:provider.stage}

    # CloudWatch log group for audit logs
    AuditLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lifebridge/audit-${self:provider.stage}
        RetentionInDays: 2557   # 7 years

    # Users table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: lifebridge-users-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH

    # KMS key
    LifeBridgeKMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: LifeBridge encryption key for PHI and sensitive data
        EnableKeyRotation: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowRootAccount
              Effect: Allow
              Principal:
                AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Action: "kms:*"
              Resource: "*"
            - Sid: AllowDynamoDBAndLambda
              Effect: Allow
              Principal:
                Service:
                  - dynamodb.amazonaws.com
                  - lambda.amazonaws.com
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:GenerateDataKey*
              Resource: "*"

  Outputs:
    AuditLogsTableName:
      Description: Name of the audit logs DynamoDB table
      Value: !Ref AuditLogsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-AuditLogsTable

    ReviewRequestsTableName:
      Description: Name of the review requests DynamoDB table
      Value: !Ref ReviewRequestsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-ReviewRequestsTable

    ImpactMetricsTableName:
      Description: Name of the impact metrics DynamoDB table
      Value: !Ref ImpactMetricsTable
      Export:
        Name: ${self:service}-${self:provider.stage}-ImpactMetricsTable

    ReviewAlertsTopicArn:
      Description: SNS Topic ARN for review alerts
      Value: !Ref ReviewAlertsSnsTopic
      Export:
        Name: ${self:service}-${self:provider.stage}-ReviewAlertsTopic

custom:
  corsConfig:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: false

  serverless-offline:
    httpPort: 3001
    host: localhost
